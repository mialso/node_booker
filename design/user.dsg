            user module design doc
        [purpose]:
    <to help user to>:
* user object is to provide different functionality to different users
* log_in(create) user
* identify(athenticate) user
* get user role
* load user_space modules according to role, with authorized user actions

        [implementation]:
    [authorization]:
* every user has a role, which provides actions user can perform
* every sensitive action(write) is performed with token
    [authentication]:
* the server holds password, which is used to create token
* the client holds token, which is used to perform actions
* on user creation the token is created on the server, and after on the client


        [data model]:
<user>
    - name
    - email
    - password
    - token
    - <role>
<role>
    - role_name
    - <allowed_actions>
    [storage representation]:
file:<user_name>
    string:<user_email>;<user_role>

        [interface]:
user_add
user_remove
user_log_in
user_log_out
